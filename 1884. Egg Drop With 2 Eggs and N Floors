// time: O(N*N)
// space: O(N)


class Solution {
    public int twoEggDrop(int n) {
        return twoEggDropUtil(n, 2);
    }

    private int twoEggDropUtil(int floors, int eggs) {
        floors++; // 1 based indexing
        eggs++; // 1 based indexing

        int[][] dp = new int[eggs][floors];

        for(int i = 1; i < floors; i++) {
            dp[0][i] = i;
        }

        for(int i = 2; i < eggs; i++) {
            for(int j = 1; j < floors; j++) {
                dp[i][j] = Integer.MAX_VALUE;

                for(int k = 1; k <= j; k++) {
                    int count = 1 + Math.max(dp[i - i][k - 1], dp[i][j - k]);
                    dp[i][j] = Math.min(dp[i][j], count);
                }
            }
        }

        return dp[eggs - 1][floors - 1];
    }
}






/*
// Recursion
// time: O(2^N)
// space: O(1)

class Solution {
    public int twoEggDrop(int n) {
        return twoEggDropUtil(n, 2);
    }

    private int twoEggDropUtil(int floors, int eggs) {
        if(eggs == 1)
            return floors;
        
        if(floors == 0) 
            return 0;

        int min = Integer.MAX_VALUE;

        for(int i = 1; i <= floors; i++) {
            int val = 1 + Math.max(twoEggDropUtil(i - 1, eggs - 1), twoEggDropUtil(floors - i, eggs));
            min = Math.min(min, val);
        }

        return min;
    }
}

*/
