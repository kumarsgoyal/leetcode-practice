// binary approch
// time: O(long x)
// space: O(1)


class Solution {
    public int mySqrt(int x) {
        if(x == 0 || x == 1)
            return x;
        
        int result = 1;
        int low = 1, high = x / 2;

        while(low <= high) {
            int mid = low + (high - low) / 2;
            long tempNum = (long) mid * mid;
            if(tempNum == x) {
                return mid;
            }
            else if(tempNum < x) {
                low = mid + 1;
                result = mid;
            }
            else {
                high = mid - 1;
            }
        }

        return result;
    }
}





/*


// naive approch
// time: O(sqrt(x))
// space: O(1)


class Solution {
    public int mySqrt(int x) {
        if(x == 0 || x == 1)
            return x;

        long result = 1l;
        int i = 1;

        while(result < x) {
            i++;
            result = i * i;
        }

        if(result == x)
            return i;

        return i - 1;
    }
}


*/
