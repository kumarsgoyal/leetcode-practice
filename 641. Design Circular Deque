class MyCircularDeque {
    class Node {
        int val;
        Node prev;
        Node next;
        public Node(int val) {
            this.val = val;
            prev = next = null;
        }
    }

    private int k;
    private int count;
    private Node head, tail;

    public MyCircularDeque(int k) {
        this.k = k;
        count = 0;
        tail = head = null;
    }
    
    public boolean insertFront(int value) {
        if(isFull())
            return false;

        Node temp = new Node(value);
        if(isEmpty()) {
            head = tail = temp;
        }
        else {
            temp.next = head;
            head.prev = temp;
            head = temp;
        }
        count++;
        return true;
    }
    
    public boolean insertLast(int value) {
        if(isFull())
            return false;

        Node temp = new Node(value);
        if(isEmpty()) {
            head = tail = temp;
        }
        else {
            tail.next = temp;
            temp.prev = tail;
            tail = temp;
        }
        count++;
        return true;
    }
    
    public boolean deleteFront() {
        if(isEmpty())
            return false;
        
        count--;
        head = head.next;
        if(count != 0)
            head.prev = null;

        return true;
    }
    
    public boolean deleteLast() {
        if(isEmpty())
            return false;

        count--;
        tail = tail.prev;
        if(count != 0)
            tail.next = null;

        return true;
    }
    
    public int getFront() {
        if(isEmpty())
            return -1;
        return head.val;
    }
    
    public int getRear() {
        if(isEmpty())
            return -1;
        return tail.val;
    }
    
    public boolean isEmpty() {
        return count == 0 ? true : false;
    }
    
    public boolean isFull() {
        return count == k ? true : false;
    }
}

/**
 * Your MyCircularDeque object will be instantiated and called as such:
 * MyCircularDeque obj = new MyCircularDeque(k);
 * boolean param_1 = obj.insertFront(value);
 * boolean param_2 = obj.insertLast(value);
 * boolean param_3 = obj.deleteFront();
 * boolean param_4 = obj.deleteLast();
 * int param_5 = obj.getFront();
 * int param_6 = obj.getRear();
 * boolean param_7 = obj.isEmpty();
 * boolean param_8 = obj.isFull();
 */
