class MyQueue {
    Stack<Integer> stk, temp;
    /** Initialize your data structure here. */
    public MyQueue() {
        stk = new Stack<>();
        temp = new Stack<>();
    }
    
    /** Push element x to the back of queue. */
    public void push(int x) {
        while(stk.isEmpty() == false)
            temp.push(stk.pop());
        
        stk.push(x);
        
        while(temp.isEmpty() == false) 
            stk.push(temp.pop());
    }
    
    /** Removes the element from in front of queue and returns that element. */
    public int pop() {
        return stk.pop();
    }
    
    /** Get the front element. */
    public int peek() {
        return stk.peek();
    }
    
    /** Returns whether the queue is empty. */
    public boolean empty() {
        return stk.isEmpty();
    }
}

// OR

/*

class MyQueue {
    private Stack<Integer> s1; 
    private Stack<Integer> s2; 

    public MyQueue() { 
        s1 = new Stack<> (); 
        s2 = new Stack<> (); 
    } 
    
    public void push(int x) { 
        while(s1.empty() == false)
            s2.push(s1.pop());
        
        s1.push(x);

        while(s2.empty() == false)
            s1.push(s2.pop());
    } 
    
    public int pop() { 
        int result = s1.pop();
        return result;
    } 
    
    public int peek() { 
        return s1.peek(); 
    } 
    
    public boolean empty() { 
        return s1.empty(); 
    } 
}

*/

/**
 * Your MyQueue object will be instantiated and called as such:
 * MyQueue obj = new MyQueue();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.peek();
 * boolean param_4 = obj.empty();
 */

