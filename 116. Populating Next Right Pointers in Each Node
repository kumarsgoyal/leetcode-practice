/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;

    public Node() {}
    
    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, Node _left, Node _right, Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/

class Solution {
    public Node connect(Node root) {
        connectUtil(root);
        return root;
    }

    private void connectUtil(Node root) {
        if(root == null)
            return;
        
        if(root.left != null)
            root.left.next = root.right;
        
        if(root.right != null && root.next != null)
            root.right.next = root.next.left; 
        connectUtil(root.left);
        connectUtil(root.right);
    }
}





/*


class Solution {

    public Node connect(Node root) {
        if(root == null ){
            return root;
        }

        Queue<Node> que = new LinkedList<Node> ();
        que.add(root);

        while(que.isEmpty() == false) {
            int size = que.size();
            Node prev = null;
            
            while(size > 0) {
                Node curr = que.poll();
                if(prev != null) {
                    prev.next = curr;
                }
                if(curr.left != null) {
                    que.add(curr.left);
                }
                if(curr.right != null) {
                    que.add(curr.right);
                }

                prev = curr;
                size--;
            }
            prev.next = null;
        }

        return root;
    }
}

*/
