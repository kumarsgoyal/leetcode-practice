
// dp
// time: O(N)
// space: O(1)

class Solution {
    public int climbStairs(int n) {
        if(n == 1)
            return 1;

        int prev1 = 1, prev2 = 1;

        for(int i = 2; i <= n; i++) {
            int temp = prev1 + prev2;
            prev2 = prev1;
            prev1 = temp;
        }

        return prev1;
    }
}




/*
// dp
// space: O(N)
// time: O(N)

class Solution {
    public int climbStairs(int n) {
        int[] dp = new int[n + 1];
        dp[0] = dp[1] = 1;

        for(int i = 2; i <= n; i++) {
            dp[i] = dp[i - 1] + dp[i - 2];
        }

        return dp[n];
    }
}

*/


/*
// recursion and memorization
// time: O(N)
// space: O(N)


class Solution {
    public int climbStairs(int n) {
        if(n < 0)
            return 0;
        if(n == 0 || n == 1)
            return 1;

        int[] dp = new int[n + 1];
        return climbStairsUtil(n - 1, dp) + climbStairsUtil(n - 2, dp);
    }


    private int climbStairsUtil(int n, int[] dp) {
        if(n < 0)
            return 0;
        if(n == 0 || n == 1)
            return 1;
        if(dp[n] != 0)
            return dp[n];

        dp[n] = climbStairsUtil(n - 1, dp) + climbStairsUtil(n - 2, dp);
        return dp[n];
    }
}
*/


/*

// recursion
// time: O(2^N)
// space: O(1)

class Solution {
    public int climbStairs(int n) {
        if(n == 1 || n == 0)
            return 1;
        
        return climbStairs(n - 1) + climbStairs(n - 2);
    }
}

*/
