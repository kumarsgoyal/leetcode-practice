class Node {
    Node[] digit;
    boolean isNumber;

    public Node(int size) {
        digit = new Node[size];
        isNumber = false;
    }

    public void setIsNumber(boolean flag) {
        isNumber = flag;
    }

    public boolean getIsNumber() {
        return isNumber;
    }

}

class MyHashSet {

    private Node root;
    private int size;

    public MyHashSet() {
        size = 9;
        root = new Node(size);
    }
    
    public void add(int key) {
        Node curr = root;
        do {
            int rem = key % size;
            key = key / size;
            if(curr.digit[rem] == null) 
                curr.digit[rem] = new Node(size);
            curr = curr.digit[rem];
        } while(key > 0);

        curr.isNumber = true;
    }
    
    public void remove(int key) {
        Node curr = root;
        do {
            curr = curr.digit[key % size];
            key = key / size;
            if(curr == null) 
                return;
        } while(key > 0);

        curr.isNumber = false;
    }
    
    public boolean contains(int key) {
        Node curr = root;
        do {
            curr = curr.digit[key % size];
            key = key / size;
        } while(curr != null && key > 0);

        return curr != null && curr.isNumber;
    }
}

/**
 * Your MyHashSet object will be instantiated and called as such:
 * MyHashSet obj = new MyHashSet();
 * obj.add(key);
 * obj.remove(key);
 * boolean param_3 = obj.contains(key);
 */






/*


class MyHashSet {
    private int size = 100;
    private int max = 1000002;
    private int[] bucket;

    public MyHashSet() {    
        bucket = new int[size];
    }
    
    public void add(int key) {
        if(key > bucket.length) {
            size = Math.min(2 * key, max);
            int[] newBucket = new int[size];
            for(int i = 0; i < bucket.length; i++) {
                newBucket[i] = bucket[i];
            }
            bucket = newBucket;
        }
        bucket[key] = 1;
    }
    
    public void remove(int key) {
        if(key <= bucket.length)
            bucket[key] = 0;
    }
    
    public boolean contains(int key) {
        return (key <= bucket.length) && bucket[key] == 1;
    }
}

*/
