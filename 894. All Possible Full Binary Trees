// DP

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<TreeNode> allPossibleFBT(int n) {
        if(n % 2 == 0)
            return new ArrayList<> ();
        
        Map<Integer, List<TreeNode>> map = new HashMap<> ();
        return helperAllPossibleFBT(n, map);
    }

    private List<TreeNode> helperAllPossibleFBT(int n, Map<Integer, List<TreeNode>> map) {
        List<TreeNode> result = new ArrayList<> ();

        if(map.get(n) != null) 
            return map.get(n);
        
        if(n == 1) {
            result.add(new TreeNode(0));
            return result;
        }

        for(int i = 1; i < n; i+=2) {
            List<TreeNode> left = helperAllPossibleFBT(i, map);
            List<TreeNode> right = helperAllPossibleFBT(n - i - 1, map);          

            map.put(i, left);
            map.put(n - i - 1, right);

            for(TreeNode l : left) {
                for(TreeNode r : right) {
                    TreeNode root = new TreeNode(0);
                    root.left = l;
                    root.right = r;

                    result.add(root);
                }
            }
        }

        return result;
    }
}



/*

// Recursion
// time: O(2^N)

class Solution {
    public List<TreeNode> allPossibleFBT(int n) {
        if(n % 2 == 0)
            return new ArrayList<> ();

        return helperAllPossibleFBT(n);
    }

    private List<TreeNode> helperAllPossibleFBT(int n) {
        List<TreeNode> result = new ArrayList<> ();
        
        if(n == 1) {
            result.add(new TreeNode(0));
            return result;
        }

        for(int i = 1; i < n; i+=2) {
            List<TreeNode> left = helperAllPossibleFBT(i);
            List<TreeNode> right = helperAllPossibleFBT(n - i - 1);

            for(TreeNode l : left) {
                for(TreeNode r : right) {
                    TreeNode root = new TreeNode(0);
                    root.left = l;
                    root.right = r;

                    result.add(root);
                }
            }
        }

        return result;
    }
}


*/
