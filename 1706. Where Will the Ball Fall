
// Recursion 
// space: O(M) M is no. of col and N is no. of rows 
// time: O(N*M)


class Solution {
    private int n;
    private int m;

    public int[] findBall(int[][] grid) {
        this.n = grid.length;
        this.m = grid[0].length;
        int[] result = new int[m];

        for(int i = 0; i < m; i++) {
            result[i] = dfs(grid, 0, i);
        }

        return result;
    }

    private int dfs(int[][] grid, int r, int c) {
        if(r == n) {
            return c;
        }

        if(grid[r][c] == 1 && (c + 1) < m && grid[r][c + 1] == 1) {
            return dfs(grid, r + 1, c + 1);
        }
        else if(grid[r][c] == -1 && (c - 1) >= 0 && grid[r][c - 1] == -1) {
            return dfs(grid, r + 1, c - 1);
        }
        return -1;
    }
}


/*

// iterative 
// space: O(M) M is no. of col and N is no. of rows 
// time: O(N*M)

class Solution {
    public int[] findBall(int[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
        int[] result = new int [m]; 

        for(int i = 0; i < m; i++) {
            int currPos = i;
            int newPos = -1;
            for(int j = 0; j < n; j++) {
                newPos = currPos + grid[j][currPos];
                if(newPos < 0 || newPos >= m || grid[j][currPos] != grid[j][newPos]) {
                    currPos = -1;
                    break;
                }

                currPos = newPos;
            }

            result[i] = currPos;
        }

        return result;
    }
}

*/
