/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    TreeNode prev;
    public TreeNode increasingBST(TreeNode root) {
        prev = new TreeNode(0);
        TreeNode curr = prev;
        inorder(root);
        return curr.right;
    }

    private void inorder(TreeNode root) {
        if(root == null) 
            return;
        
        inorder(root.left);

        root.left = null;
        prev.right = root;
        prev = root;
        inorder(root.right);

    }
}


/*

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode increasingBST(TreeNode root) {
        Stack<TreeNode> stack = new Stack<> ();
        TreeNode curr = root;
        TreeNode temp = new TreeNode(0);
        TreeNode prev = temp;

        while(curr != null || stack.isEmpty() == false)  {
            while(curr != null) {
                stack.push(curr);
                curr = curr.left;
            }

            curr = stack.pop();
            curr.left = null;
            prev.right = curr;
            prev = curr;
            curr = curr.right;
        }

        return temp.right;
    }
}

*/
