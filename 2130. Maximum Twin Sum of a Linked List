/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public int pairSum(ListNode head) {
        ListNode head2 = split(head);
        return pairSumUtil(head, reverse(head2));
    }

    private ListNode split(ListNode head) {
        ListNode slow = head;
        ListNode fast = head;

        while(fast.next != null && fast.next.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }

        return slow;
    }

    private ListNode reverse(ListNode head) {
        ListNode prev = null;
        ListNode curr = head;
        ListNode next = null;

        while(curr != null) {
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }

    private int pairSumUtil(ListNode head1, ListNode head2) {
        int max = 0, sum = 0;
        while(head1 != null && head2 != null) {
            sum = head1.val + head2.val;
            head1 = head1.next;
            head2 = head2.next;
            max = Math.max(sum, max);
        }

        return max;
    }
}
