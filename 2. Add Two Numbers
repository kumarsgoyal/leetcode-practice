// space: O(N) // return list
// time: O(N)

class Solution {

    private ListNode sumList(ListNode l1, ListNode l2) {
        ListNode head = new ListNode(1);
        ListNode curr = head;
        int carry = 0;

        while(l1 != null && l2 != null) {
            int sum = l1.val + l2.val + carry;
            if(sum >= 10) {
                sum = sum - 10;
                carry = 1;
            }
            else {
                carry = 0;
            }
            ListNode temp = new ListNode(sum);
            curr.next = temp;
            curr = curr.next;
            l1 = l1.next;
            l2 = l2.next;
        }

        while(l1 != null) {
            int sum = l1.val + carry;
            if(sum >= 10) {
                sum = sum - 10;
                carry = 1;
            }
            else {
                carry = 0;
            }
            ListNode temp = new ListNode(sum);
            curr.next = temp;
            curr = curr.next;
            l1 = l1.next; 
        }

        while(l2 != null) {
            int sum = l2.val + carry;
            if(sum >= 10) {
                sum = sum - 10;
                carry = 1;
            }
            else {
                carry = 0;
            }
            ListNode temp = new ListNode(sum);
            curr.next = temp;
            curr = curr.next;
            l2 = l2.next; 
        }

        if(carry != 0) {
            ListNode temp = new ListNode(carry);
            curr.next = temp;
            curr = curr.next;
        }

        return head.next;
    }

    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {

        ListNode head = sumList(l1, l2);
        return head;
    }
}
