/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * public interface NestedInteger {
 *
 *     // @return true if this NestedInteger holds a single integer, rather than a nested list.
 *     public boolean isInteger();
 *
 *     // @return the single integer that this NestedInteger holds, if it holds a single integer
 *     // Return null if this NestedInteger holds a nested list
 *     public Integer getInteger();
 *
 *     // @return the nested list that this NestedInteger holds, if it holds a nested list
 *     // Return empty list if this NestedInteger holds a single integer
 *     public List<NestedInteger> getList();
 * }
 */
public class NestedIterator implements Iterator<Integer> {
    Queue<Integer> que = new LinkedList<> ();

    public NestedIterator(List<NestedInteger> nestedList) {
        buildQueue(nestedList);
    }

    @Override
    public Integer next() {
        return (hasNext() == true) ? que.remove() : -1;
    }

    @Override
    public boolean hasNext() {
        return (que.isEmpty() == true) ? false : true;
    }

    private void buildQueue(List<NestedInteger> nestedList) {
        Iterator<NestedInteger> it = nestedList.iterator();

        while(it.hasNext()) {
            NestedInteger temp = it.next();
            if(temp.isInteger()) {
                que.add(temp.getInteger());
            }
            else {
                buildQueue(temp.getList());
            }
        }
    }
}

/**
 * Your NestedIterator object will be instantiated and called as such:
 * NestedIterator i = new NestedIterator(nestedList);
 * while (i.hasNext()) v[f()] = i.next();
 */
