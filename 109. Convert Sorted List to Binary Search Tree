/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    private ListNode ptr;
    public TreeNode sortedListToBST(ListNode head) {
        ptr = head;
        int n = getLengthOfList(head);
        return listNodeToTreeNode(n);
    }

    private int getLengthOfList(ListNode head) {
        int count = 0;
        while(head != null) {
            count++;
            head = head.next;
        }   
        return count;
    }

    private TreeNode listNodeToTreeNode(int n) {
        if(n == 0)
            return null;

        TreeNode root = new TreeNode();
        root.left = listNodeToTreeNode(n / 2);
        root.val = ptr.val;
        ptr = ptr.next;
        root.right = listNodeToTreeNode(n - n / 2 - 1);

        return root;
    }   

}
