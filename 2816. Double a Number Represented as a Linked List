/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode doubleIt(ListNode head) {
        head = reverse(head);
        doubleItUtil(head);
        return reverse(head);
    }

    private ListNode reverse(ListNode head) {
        ListNode curr = head;
        ListNode prev = null;
        ListNode next = null;

        while(curr != null) {
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }

        return prev;
    }

    private void doubleItUtil(ListNode head) {
        ListNode curr = head;
        ListNode prev = null;
        int carry = 0;

        while(curr != null) {
            int sum = curr.val * 2 + carry;
            carry = sum / 10;
            sum = sum % 10;
            curr.val = sum;

            prev = curr;
            curr = curr.next;
        }

        if(carry != 0) 
            prev.next = new ListNode(carry);
    }
}
