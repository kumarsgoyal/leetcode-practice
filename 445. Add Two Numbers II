/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        return addTwoNumbersUtil(reverse(l1), reverse(l2));
    }

    private ListNode reverse(ListNode l1) {
        ListNode curr = l1;
        ListNode prev = null;
        ListNode next = null;
        while(curr != null) {
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }

    private ListNode addTwoNumbersUtil(ListNode l1, ListNode l2) {
        ListNode curr = null;
        int carry = 0;

        while(l1 != null || l2 != null) {
            int d1 = l1 == null ? 0 : l1.val;
            int d2 = l2 == null ? 0 : l2.val;

            int sum = carry + d1 + d2;
            carry = sum / 10;
            sum = sum % 10;
            curr = new ListNode(sum, curr);
            l1 = l1 == null ? null : l1.next;
            l2 = l2 == null ? null : l2.next;
        }

        if(carry > 0) 
            curr = new ListNode(carry, curr);
    
        return curr;
    } 
}
