
// DP
// time: O(N)
// space: O(N)

class Solution {
    public int minCostClimbingStairs(int[] cost) {
        int n = cost.length;
        int[] dpCost = new int[n + 1];
        
        dpCost[0] = cost[0];
        dpCost[1] = cost[1];

        for(int i = 2; i < n; i++) {
            dpCost[i] = cost[i] + Math.min(dpCost[i - 1], dpCost[i - 2]);
        }

        dpCost[n] = Math.min(dpCost[n - 1], dpCost[n - 2]);

        return dpCost[n];
    }
}




/*

// Recursion
// time: O(2^n)
// space: O(1)

class Solution {
    public int minCostClimbingStairs(int[] cost) {
        int n = cost.length;
        return Math.min(minCostClimbingStairsUtil(cost, n - 1), minCostClimbingStairsUtil(cost, n - 2));
    }

    private int minCostClimbingStairsUtil(int[] cost, int n) {
        if(n == 0 || n == 1)
            return cost[n];
        
        return cost[n] + Math.min(minCostClimbingStairsUtil(cost, n - 1), minCostClimbingStairsUtil(cost, n - 2));
    }
}
*/
