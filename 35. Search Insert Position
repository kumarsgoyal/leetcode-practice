// binary search 
// time: O(log N)
// space: O(1)


class Solution {
    public int searchInsert(int[] nums, int target) {
        int n = nums.length;

        if(target < nums[0])
            return 0;
        if(target > nums[n - 1])
            return n;

        int low = 0, high = n - 1;
        
        while(low <= high) {
            int mid = low + (high - low) / 2;
            if(nums[mid] == target)
                return mid;
            if(nums[mid] < target) 
                low = mid + 1;
            else 
                high = mid - 1; 
        }

        return low;
    }
}



/*

// linear search 
// time: O(N)
// space: O(1)

class Solution {
    public int searchInsert(int[] nums, int target) {
        for(int i = 0; i < nums.length; i++) {
            if(nums[i] == target)
                return i;
            if(nums[i] > target)
                return i;
        }

        return nums.length;
    }
}

*/
