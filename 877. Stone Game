// space: O(1)
// time: O(1)

// It is given in the question that even piles and the sum of all piles of stones  are odd.
// Any player will get either odd index piles or even index of piles and sum[odd] > sum[even] OR sum[odd] < sum[even]
// so will take either odd or even based on sum so Alex will always win

class Solution {
    public boolean stoneGame(int[] piles) {
        return 1;
    }
}



/*
// time: O(N ^ 3)
// Space:(N * N * 2)

class Solution {
    public boolean stoneGame(int[] piles) {
        int n = piles.length;
        int[][][] dp = new int[2][n][n];
        return stoneGameUtil(piles, 0, n - 1, 0, dp) > 1 ? true : false;
    }

    private int stoneGameUtil(int[] piles, int left, int right, int turn,int[][][] dp) {
        if(left > right)
            return 0;

        if(left == right) {
            if(turn == 0) 
                dp[turn][left][right] = piles[left];
            else
                dp[turn][left][right] = -piles[left];
            return dp[turn][left][right];
        }

        if(dp[turn][left][right] != 0)
            return dp[turn][left][right];

        if(turn == 0) {
            int leftSum = piles[left] + stoneGameUtil(piles, left + 1, right, 1, dp);
            int rightSum = piles[right] + stoneGameUtil(piles, left, right - 1, 1, dp);
            dp[turn][left][right] = Math.max(leftSum, rightSum);
        }
        else {
            int leftSum = stoneGameUtil(piles, left + 1, right, 0, dp) - piles[left];
            int rightSum = stoneGameUtil(piles, left, right - 1, 0, dp) - piles[right];
            dp[turn][left][right] = Math.max(leftSum, rightSum);
        }
        return dp[turn][left][right];
    }
}
*/


/*

// time: O(2 ^ N)
// space: O(1)

class Solution {
    public boolean stoneGame(int[] piles) {
        return stoneGameUtil(piles, 0, piles.length - 1, true) > 0;
    }

    private int stoneGameUtil(int[] piles, int left, int right, boolean turn) {
        if(left > right) 
            return 0;

        if(left == right) {
            if(turn == 0) 
                return piles[left];
            else
                return -piles[left];
        }
        
        if(turn) {
            int leftStones = stoneGameUtil(piles, left + 1, right, !turn) + piles[left];
            int rightStones = stoneGameUtil(piles, left, right - 1, !turn) + piles[right];
            return Math.max(leftStones, rightStones) ;
        }
        else {
            int leftStones = stoneGameUtil(piles, left + 1, right, !turn) - piles[left];
            int rightStones = stoneGameUtil(piles, left, right - 1, !turn) - piles[right];
            return Math.max(leftStones, rightStones);
        }
    }
}

*/
