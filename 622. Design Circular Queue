class MyCircularQueue {
    class Node {
        int val;
        Node next;
        public Node(int val) {
            this.val = val;
            next = null;
        }
    }

    private Node head, tail;
    private int k;
    private int size;

    public MyCircularQueue(int k) {
        this.k = k;
        size = 0;
        head = tail = null;
    }
    
    public boolean enQueue(int value) {
        if(isFull())
            return false;

        Node temp = new Node(value);
        if(isEmpty()) {
            head = tail = temp;
        }
        else {
            tail.next = temp;
            temp.next = head;
            tail = temp;
        }
        size++;
        return true;
    }
    
    public boolean deQueue() {
        if(isEmpty()) 
            return false;
        if(head == tail) {
            head = tail = null;
        }
        else {
            head = head.next;
            tail.next = head;
        }
        size--;
        return true;
    }
    
    public int Front() {
        if(isEmpty()) 
            return -1;
        return head.val;
    }
    
    public int Rear() {
        if(isEmpty()) 
            return -1;
        return tail.val;
    }
    
    public boolean isEmpty() {
        return (size == 0) ? true : false;
    }
    
    public boolean isFull() {
        return (size == k) ? true : false;
    }
}

/**
 * Your MyCircularQueue object will be instantiated and called as such:
 * MyCircularQueue obj = new MyCircularQueue(k);
 * boolean param_1 = obj.enQueue(value);
 * boolean param_2 = obj.deQueue();
 * int param_3 = obj.Front();
 * int param_4 = obj.Rear();
 * boolean param_5 = obj.isEmpty();
 * boolean param_6 = obj.isFull();
 */
