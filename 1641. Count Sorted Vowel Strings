// dp
// space O(5) or O(1) if we 2d array then space is O(N * 5)
// time: O(N * 4)

/*
  a  e  i  o  u
  1  1  1  1  1
  5  4  3  2  1
  15 10 6  3  1

  pattern is dp[i][j] = dp[i][j+1] + dp[i - 1][j]
  or 
  dp[i] = dp[i] + dp[i + 1]
*/

class Solution {
    public int countVowelStrings(int n) {
        int dp[] = new int[5];
        Arrays.fill(dp, 1);

        for(int j = 1; j <= n; j++) {
            for(int i = 3; i >= 0; i--) {
                dp[i] = dp[i] + dp[i + 1];
            }
        }

        return dp[0];
    }
}


/*

// Recursion
// time: O(N!)
// space: O(1)

class Solution {

    private static char[] vowels = new char[] {'a', 'e', 'i', 'o', 'u'};

    public int countVowelStrings(int n) {
        return countVowelStringsUtil(n, 0);
    }

    private int countVowelStringsUtil(int n, int start) {
        if(n == 0)
            return 1;

        int count = 0;
        for(int i = start; i < vowels.length; i++) {
            count += countVowelStringsUtil(n - 1, i);
        }

        return count;
    }
}

*/
