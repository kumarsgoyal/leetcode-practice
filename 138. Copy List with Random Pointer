/*
// Definition for a Node.
class Node {
    int val;
    Node next;
    Node random;

    public Node(int val) {
        this.val = val;
        this.next = null;
        this.random = null;
    }
}
*/

class Solution {
    public Node copyRandomList(Node head) {
        if(head == null)
            return null;

        createNodes(head);
        copyRandomPointer(head);
        return seprateList(head);
    }

    private void createNodes(Node head) {
        Node curr = head;

        while(curr != null) {
            Node temp = new Node(curr.val);
            temp.next = curr.next;
            curr.next = temp;
            curr = temp.next;
        }
    }

    private void copyRandomPointer(Node head) {
        Node curr = head;

        while(curr != null) {
            if(curr.random != null)
                curr.next.random = curr.random.next;
            curr = curr.next.next;
        }
    }

    private Node seprateList(Node head) {
        Node dummy = new Node(0);
        Node ptr = dummy;
        Node curr = head;

        while(curr != null) {
            ptr.next = curr.next;
            ptr = ptr.next;

            curr.next = curr.next.next;
            curr = curr.next;
        }

        return dummy.next;
    }

}
