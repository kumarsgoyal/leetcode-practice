/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
    public List<Integer> preorder(Node root) {
        List<Integer> list = new ArrayList<> ();
        preorderUtiil(root, list);
        return list;
    }

    private void preorderUtiil(Node root, List<Integer> list) {
        if(root == null)
            return;

        Stack<Node> stack = new Stack<> ();
        stack.push(root);

        while(!stack.empty()) {
            Node temp = stack.pop();
            list.add(temp.val);

            for(int i = temp.children.size() - 1; i >= 0; i--) {
                stack.push(temp.children.get(i));
            }
        }
    }
}
