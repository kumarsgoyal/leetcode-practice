class Solution {
    public int maxProfit(int[] prices) {
        int i = 0;
        int valley = prices[0];
        int peak = prices[0];
        int maxProfit = 0;
        
        while(i < prices.length - 1) {
            while(i < prices.length - 1 && prices[i] >= prices[i + 1]) 
                i++;
            valley = prices[i];
            while(i < prices.length - 1 && prices[i] <= prices[i + 1])
                i++;
            peak = prices[i];
            
            maxProfit += (peak - valley);
        }
        
        return maxProfit;
    }
}


/*

class Solution {
    public int maxProfit(int[] prices) {
        int n = prices.length;
        // rowIndex -> index,
        // columnIndex -> sell, buy
        int[][] dp = new int[n][2];

        for(int i[] : dp) 
            Arrays.fill(i, -1);

        return solve(0, 1, prices, dp);
    }

    private int solve(int index, int buy, int[] prices, int[][] dp) {
        
        if(index == prices.length) 
            return 0;

        if(dp[index][buy] != -1) 
            return dp[index][buy];

        int profit = 0;
        if(buy == 1) {
            int buyNow = -prices[index] + solve(index + 1, 0, prices, dp);
            int skipBuy = 0 + solve(index + 1, 1, prices, dp);
            profit = Math.max(buyNow, skipBuy);
        }
        else {
            int sellNow = prices[index] + solve(index + 1, 1, prices, dp);
            int skipSell = 0 + solve(index + 1, 0, prices, dp);
            profit = Math.max(sellNow, skipSell);
        }

        dp[index][buy] = profit;
        return profit;
    }
}

*/
