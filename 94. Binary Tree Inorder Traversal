
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> res = new LinkedList<>();
        inorderTraversalUtil(root, res);
        return res;
    }

    private void inorderTraversalUtil(TreeNode root, List<Integer> res) {
        Stack<TreeNode> stack = new Stack<> ();
        TreeNode curr = root;

        while(curr != null || stack.empty() == false) {
            while(curr != null) {
                stack.push(curr);
                curr = curr.left;
            }

            curr = stack.pop();
            res.add(curr.val);
            curr = curr.right;
        }
    }

}


/*

class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> res = new LinkedList<>();
        inorderTraversalUtil(root, res);
        return res;
    }

    private void inorderTraversalUtil(TreeNode root, List<Integer> res) {
        if(root == null) 
            return;

        inorderTraversalUtil(root.left, res);
        res.add(root.val);
        inorderTraversalUtil(root.right, res);
    }

}

*/
