class Solution {
    public List<List<Integer>> allPathsSourceTarget(int[][] graph) {
        List<List<Integer>> result = new ArrayList<> ();
        Stack<Integer> path = new Stack<> ();
        int start = 0, end = graph.length - 1;
        
        path.push(start);
        dfs(start, end, graph, result, path);

        return result;
    }

    private void dfs(int start, int end, int[][] graph, List<List<Integer>> result, Stack<Integer> path) {
        if(start == end) {
            result.add(new ArrayList(path));
            return;
        }

        for(int i = 0; i < graph[start].length; i++) {
            path.push(graph[start][i]);
            dfs(graph[start][i], end, graph, result, path);
            path.pop();
        }
    }
}
