/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode rotateRight(ListNode head, int k) {
        if(head == null || head.next == null)
            return head;
        int len = getLength(head);
        k = k % len;
        
        if(k == 0)
            return head;
        
        int skip = len - k;
        ListNode curr = head;
        ListNode prev = null;
        while(skip > 0 && curr != null) {
            skip--;
            prev = curr;
            curr = curr.next;
        }   
        prev.next = null;
        ListNode newHead = curr;

        while(curr.next != null) {
            curr = curr.next;
        }

        curr.next = head;

        return newHead;
    }

    private int getLength(ListNode head) {
        int len = 0;
        while(head != null) {
            len++;
            head = head.next;
        }
        return len;
    }
}
